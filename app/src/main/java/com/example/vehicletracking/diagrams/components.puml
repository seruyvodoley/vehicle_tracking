@startuml

skinparam componentStyle rectangle
skinparam defaultTextAlignment center

' ==== Цветовая схема ====
' #CDEAFF – UI слой (Fragments)
' #DFFFD6 – Tracking Core (логика трекинга)
' #F9D6D5 – Simulation (генерация координат)
' #EEE8FF – Abstractions (интерфейсы и контракты)
' #FFFACD – Security (root, API ключи, HTTPS)
' #E6F0FF – Auth (авторизация, RBAC)

' ==== UI Layer ====
package "UI Layer\n[Контроль потока, ограничение видимости]" <<Rectangle>> #CDEAFF {
  [MapFragment]
}

' ==== Tracking Core ====
package "Tracking Core\n[SRP, DIP, OCP, CCP]" <<Rectangle>> #DFFFD6 {
  [VehicleTracker]
  [MapTrackingViewModel]
}

' ==== Simulation Layer ====
package "Simulation\n[SRP, ограничение видимости]" <<Rectangle>> #F9D6D5 {
  [VehicleLocationSimulator]
}

' ==== Abstractions Layer ====
package "Abstractions\n[DIP, устойчивые зависимости]" <<Rectangle>> #EEE8FF {
  [LocationProvider]
  [LocationCallback]
}

' ==== Security Layer ====
package "Security Layer\n[Root Check, HTTPS, API ключи]" <<Rectangle>> #FFFACD {
  [RootChecker]
  [SecureApiConfig]
}

' ==== Auth Layer ====
package "Auth Layer\n[RBAC, Firebase Auth]" <<Rectangle>> #E6F0FF {
  [AuthManager]
  [UserSession]
}

' ==== Directed Dependencies ====
[MapFragment] --> [MapTrackingViewModel] : uses
[MapFragment] --> [RootChecker] : checks root
[MapFragment] --> [AuthManager] : checks login
[MapTrackingViewModel] --> [VehicleTracker] : controls
[MapTrackingViewModel] --> [SecureApiConfig] : uses config
[MapTrackingViewModel] --> [UserSession] : gets userId
[VehicleTracker] --> [LocationProvider] : depends on abstraction
[VehicleLocationSimulator] --> [LocationCallback] : callback

' ==== Interface Implementation ====
[VehicleLocationSimulator] ..|> [LocationProvider]
[VehicleTracker] ..|> [LocationCallback]

@enduml
